"""
Django settings for ScholarMate_backend project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os 
from pathlib import Path
from dotenv import load_dotenv # dotenv 임포트

# .env 파일 로드
load_dotenv() 

# --- Email settings ---
EMAIL_BACKEND = os.getenv("EMAIL_BACKEND", "django.core.mail.backends.smtp.EmailBackend")
EMAIL_HOST = os.getenv("EMAIL_HOST", "smtp.naver.com")
EMAIL_PORT = int(os.getenv("EMAIL_PORT", "465"))
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER", "joon6390@naver.com")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD", "")
EMAIL_USE_TLS = os.getenv("EMAIL_USE_TLS", "False") == "True"
EMAIL_USE_SSL = os.getenv("EMAIL_USE_SSL", "True") == "True"
DEFAULT_FROM_EMAIL = os.getenv("DEFAULT_FROM_EMAIL", EMAIL_HOST_USER)

# 쉼표 구분 수신자 리스트
CONTACT_ADMIN_EMAILS = [
    e.strip() for e in os.getenv("CONTACT_ADMIN_EMAILS", "").split(",") if e.strip()
]


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'your-default-secret-key-for-dev') # 개발용 기본값

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DJANGO_DEBUG', 'True') == 'True' # 환경 변수로 DEBUG 제어

# ALLOWED_HOSTS를 환경 변수에서 가져오도록 변경
ALLOWED_HOSTS = os.environ.get('DJANGO_ALLOWED_HOSTS', '127.0.0.1,localhost').split(',')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'scholarships',
    'rest_framework_simplejwt',
    'rest_framework.authtoken',
    'djoser',
    'corsheaders',
    'django_filters',
    'userinfor',
    'contact',
]

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": (
        "rest_framework.permissions.IsAuthenticated",
    ),
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend']
}

from datetime import timedelta

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=24),       # ✅ Access Token: 24시간 유지
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),        # ✅ Refresh Token: 7일 유지
    "ROTATE_REFRESH_TOKENS": True,                      # ✅ Access 재발급 시 Refresh도 새로 발급
    "BLACKLIST_AFTER_ROTATION": True,                   # ✅ 이전 Refresh Token은 무효화
    "AUTH_HEADER_TYPES": ("Bearer", "JWT"),             # ✅ 헤더 타입 설정
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "ALGORITHM": "HS256",
}

DJOSER = {
    "USER_ID_FIELD": "username",    # ✅ Django 기본 User 모델에서 username 사용
    "SERIALIZERS": {
        "user_create": "djoser.serializers.UserCreateSerializer",   # ✅ 기본 회원가입 Serializer 사용
        "user": "djoser.serializers.UserSerializer",
        "current_user": "djoser.serializers.UserSerializer",
    },
}

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",    # ✅ CORS 미들웨어 추가
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# CORS_ALLOW_ALL_ORIGINS = False # 이 설정은 CORS_ALLOWED_ORIGINS와 함께 사용되지 않습니다.
# CORS_ALLOWED_ORIGINS를 환경 변수에서 가져오도록 변경
CORS_ALLOWED_ORIGINS = os.environ.get('CORS_ALLOWED_ORIGINS', 'http://localhost:5173,http://34.228.112.95').split(',')
CORS_ALLOW_CREDENTIALS = True 

CORS_ALLOW_HEADERS = [
    "authorization",
    "content-type",
]

# CSRF_TRUSTED_ORIGINS는 CORS_ALLOWED_ORIGINS와 동일하게 환경 변수에서 가져오는 것이 일관적입니다.
CSRF_TRUSTED_ORIGINS = os.environ.get('CSRF_TRUSTED_ORIGINS', 'http://localhost:5173,http://34.228.112.95').split(',')


ROOT_URLCONF = 'ScholarMate_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ScholarMate_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.environ['DATABASE_NAME'],
        'USER': os.environ['DATABASE_USER'],
        'PASSWORD': os.environ['DATABASE_PASSWORD'],
        'HOST': os.environ['DATABASE_HOST'],
        'PORT': os.environ['DATABASE_PORT'],
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/' # 슬래시로 시작하는 것이 일반적
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') # STATIC_ROOT 추가

# --- API Keys from Environment Variables ---
# OpenAI API 키
OPENAI_API_KEY = os.environ.get('OPENAI_API_KEY') # 'OPEN_API_KEY' -> 'OPENAI_API_KEY'로 변경
if not OPENAI_API_KEY:
    print("WARNING: OPENAI_API_KEY 환경 변수가 설정되지 않았습니다. OpenAI API 호출에 문제가 발생할 수 있습니다.")

# 공공데이터포털 SERVICE_KEY (장학재단 리스트 API)
SERVICE_KEY = os.environ.get('SERVICE_KEY')
if not SERVICE_KEY:
    print("WARNING: SERVICE_KEY 환경 변수가 설정되지 않았습니다. 공공데이터포털 API 호출에 문제가 발생할 수 있습니다.")

# Celery 설정 (추가)
CELERY_BROKER_URL = os.environ.get('CELERY_BROKER_URL', 'redis://localhost:6379/0')
CELERY_RESULT_BACKEND = os.environ.get('CELERY_RESULT_BACKEND', 'redis://localhost:6379/0')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Asia/Seoul' 


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


